import org.springframework.util.StopWatch

plugins {
    id 'org.springframework.boot' version '3.0.0'

    id 'io.spring.dependency-management' version '1.1.3'
}

version '1.0-SNAPSHOT'

dependencies {
    // 自定义 starter
    annotationProcessor 'org.springframework.boot:spring-boot-autoconfigure-processor'
    implementation 'org.springframework.boot:spring-boot-starter'
    implementation 'org.springframework.boot:spring-boot-starter-log4j2'
    // akka 依赖做异步消息处理
    api 'com.typesafe.akka:akka-actor-typed_2.13:2.7.0'
    // redisson 做分布式锁
    api 'org.redisson:redisson-spring-boot-starter:3.23.0'
    api 'org.springframework.boot:spring-boot-starter-data-redis'

    // aop aspectj
    api 'org.springframework.boot:spring-boot-starter-aop'


    // web、websocket 相关(这里包含了 spring-boot-starter-web，所以不需要再引入)
    api 'org.springframework.boot:spring-boot-starter-websocket'

    testImplementation 'org.springframework.boot:spring-boot-starter-test'

}

tasks {
    compileJava {
        // 解决 springboot 自定义元数据无法生成 spring-autoconfiguration-metadata.json 文件
        inputs.files(tasks.withType(ProcessResources))
    }
}

tasks.register('delete' + project.name.capitalize() + 'LogFiles', Delete) {
// tasks.register("delete${project.name.capitalize()}Logs", Delete) {
    description = '删除当前工程下的日志文件'
    group = 'custom tasks'

    // 日志文件的路径
    String logsSubDir = project.projectDir.absolutePath + "\\logs"

    doFirst {
        println "在子工程${project.name.capitalize()}中执行删除路径[${logsSubDir}]下的日志文件"
    }

    doLast {
        // 如果日志文件夹不存在，则不执行删除
        if (!file(logsSubDir).exists()) {
            println "日志文件夹[${logsSubDir}]不存在，不执行删除"
            return
        }
        // 记录删除日志文件的耗时
        StopWatch stopWatch = new StopWatch()
        stopWatch.start()
        // 删除日志文件
        fileTree(logsSubDir).include('**/*.log', '**/*html').each { File file ->
            println '删除文件: ' + file
            file.delete()
        }
        stopWatch.stop()
        println "删除日志文件耗时: ${stopWatch.getTotalTimeMillis()}ms"
    }
}