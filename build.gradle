buildscript {
    // 设置仓库
    repositories {
        mavenLocal()
        maven { url "https://maven.aliyun.com/repository/public" }
        maven { url "https://maven.aliyun.com/repository/central" }
        maven { url "https://maven.aliyun.com/repository/google" }
        maven { url "https://maven.aliyun.com/repository/spring" }
        mavenCentral()
    }
}
// 插件
plugins {
    // id 'java'
    // id 'java-library'
}

//全局配置
allprojects {

    // 设置插件
    plugins.apply('java')
    plugins.apply('java-library')
    // 设置项目的 group 和 version
    group 'com.hongjun'
    version '1.0-SNAPSHOT'
    tasks {
        // 设置编译版本
        compileJava {
            options.encoding = "UTF-8"
            // 解决 springboot 自定义元数据无法生成 spring-autoconfiguration-metadata.json 文件
            inputs.files(tasks.withType(ProcessResources))
            // sourceCompatibility = JavaVersion.VERSION_17
            // targetCompatibility = JavaVersion.VERSION_17
        }
        compileTestJava {
            options.encoding = "UTF-8"
            // sourceCompatibility = JavaVersion.VERSION_17
            // targetCompatibility = JavaVersion.VERSION_17
        }
        javadoc {
            options.encoding = "UTF-8"
        }
    }


    /*// 在idea中使用gradle进行编译，编码gbk错误
    tasks.withType(JavaCompile).configureEach {
        compileJava {
            options.encoding("UTF-8")
        }
        inputs.files(tasks.withType(ProcessResources))

    }
    tasks.withType(Javadoc).configureEach {
        javadoc {
            options.encoding = "UTF-8"
        }
    }
    // 设置 Test 编码信息
    compileTestJava {
        options.encoding = "UTF-8"
    }*/

    configurations {
        // 排除依赖项中整个spring-boot下面的logging
        configureEach {
            exclude group: 'org.springframework.boot', module: 'spring-boot-starter-logging'
        }

        // 排除所有指定依赖项下的某个依赖
        // implementation (**) {
        //     exclude group: 'org.springframework.boot', module: 'spring-boot-starter-logging'
        // }

    }

    test {
        // 使用 JUnit5 测试框架
        useJUnitPlatform()
    }
}


// 子模块的通用设置
subprojects {

    // 设置仓库
    repositories {
        mavenLocal()
        maven { url "https://maven.aliyun.com/repository/public" }
        maven { url "https://maven.aliyun.com/repository/central" }
        maven { url "https://maven.aliyun.com/repository/google" }
        maven { url "https://maven.aliyun.com/repository/spring" }
        mavenCentral()
    }



    // 设置通用的依赖
    dependencies {
        // lombok的使用需要加上这个注解，否则编译失败
        annotationProcessor 'org.projectlombok:lombok:1.18.22'
        implementation 'jakarta.annotation:jakarta.annotation-api:2.1.1'
        implementation 'com.google.guava:guava:31.1-jre'
        implementation 'com.google.code.gson:gson:2.10'
        implementation 'com.alibaba.fastjson2:fastjson2:2.0.23'
        implementation 'javax.inject:javax.inject:1'
        implementation 'cn.hutool:hutool-all:5.8.8'


        // 测试时的使用
        testAnnotationProcessor 'org.projectlombok:lombok:1.18.22'

        testImplementation(platform('org.junit:junit-bom:5.10.0'))
        // 支持旧版本的 IDEA 允许测试
        testRuntimeOnly("org.junit.platform:junit-platform-launcher") {
            because("Only needed to run tests in a version of IntelliJ IDEA that bundles older versions")
        }
        // 仅支持 JUnit 5
        testRuntimeOnly("org.junit.jupiter:junit-jupiter-engine")
        testImplementation("org.junit.jupiter:junit-jupiter-engine")
        // 支持 JUnit 3或JUnit 4测试代码
        testRuntimeOnly("org.junit.vintage:junit-vintage-engine")
    }

    configurations {
        // annotationProcessor 声明的依赖会被添加到 compileOnly 中效果如下
        // compileOnly 'org.projectlombok:lombok:1.18.22'
        compileOnly {
            extendsFrom annotationProcessor
        }
        // 同上 annotationProcessor -> testImplementation
        testImplementation {
            extendsFrom annotationProcessor
        }
    }
}


project(':common-starter') {

    apply plugin: 'maven-publish'
    // apply plugin: 'org.springframework.boot'

    // 打包成jar
    jar {
        enabled = true
    }

    sourceSets {
        // 定义源码所在位置
        main {
            java {
                srcDirs = ['src/main/java']
            }
            resources {
                srcDirs = ['src/main/resources']
            }
        }
    }

}


project(':common-web') {

    apply plugin: 'java'
    apply plugin: 'java-library'

    sourceSets {
        // 定义源码所在位置
        main {
            java {
                srcDirs = ['src/main/java']
            }
            resources {
                srcDirs = ['src/main/resources']
            }
        }
    }

    dependencies {
        // 引用common-starter
        implementation project(':common-starter')
        implementation 'org.springframework.boot:spring-boot-gradle-plugin:3.0.0'
        implementation 'org.springframework.boot:spring-boot-starter-log4j2:3.0.0'
        annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor:3.0.0'
        implementation 'org.springframework.boot:spring-boot-autoconfigure:3.0.0'
        // akka依赖做异步消息处理
        api 'com.typesafe.akka:akka-actor-typed_2.13:2.7.0'
        implementation 'org.springframework.boot:spring-boot-starter:3.0.0'
        implementation 'org.springframework.boot:spring-boot-starter-aop:3.0.0'
        implementation 'org.springframework.boot:spring-boot-starter-log4j2:3.0.0'
        implementation 'org.springframework.boot:spring-boot-starter-websocket:3.0.0'
        implementation 'org.springframework.boot:spring-boot-gradle-plugin:3.0.0'
        implementation 'org.springframework.boot:spring-boot-starter-log4j2:3.0.0'
        testImplementation 'org.springframework.boot:spring-boot-starter-test:3.0.0'
    }
}

project(':elasticsearch-starter'){
    apply plugin: 'java'
    apply plugin: 'java-library'
    dependencies {
        implementation 'org.springframework.boot:spring-boot-gradle-plugin:3.0.0'
        implementation 'org.springframework.boot:spring-boot-starter-log4j2:3.0.0'
        // 使其向下传递依赖
        api 'org.springframework.boot:spring-boot-starter-data-elasticsearch:3.0.0'
        testImplementation 'org.springframework.boot:spring-boot-starter-test:3.0.0'
        // 自定义配置元数据
        annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor:3.0.0'
        implementation 'org.springframework.boot:spring-boot-autoconfigure:3.0.0'
    }
}

project(':quick-starter') {
    // 定义springboot版本
   ext {
       springBootVersion = '3.0.0'
   }

    plugins.apply('application')
    // apply plugin:  'org.springframework.boot'

    dependencies {
        implementation project(':common-starter')
        implementation project(':common-web')
        implementation project(':elasticsearch-starter')
        runtimeOnly 'org.springframework.boot:spring-boot-devtools:3.0.0'
        implementation 'org.springframework.boot:spring-boot-gradle-plugin:3.0.0'
        implementation 'org.springframework.boot:spring-boot-starter-log4j2:3.0.0'
        implementation 'org.springframework.boot:spring-boot-starter-log4j2:3.0.0'
        implementation 'org.springframework.boot:spring-boot-starter-web:3.0.0'
        implementation 'org.springframework.boot:spring-boot-starter:3.0.0'
        testImplementation ('org.springframework.boot:spring-boot-starter-test:3.0.0')
    }
}



