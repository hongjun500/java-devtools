buildscript {
    // 设置仓库
    repositories {
        maven { url "https://maven.aliyun.com/repository/public" }
        maven { url "https://maven.aliyun.com/repository/central" }
        maven { url "https://maven.aliyun.com/repository/google" }
        maven { url "https://maven.aliyun.com/repository/spring" }
        mavenCentral()
    }

}

plugins {
    id "java"
}

//全局配置
allprojects {
    // 设置插件
    plugins.apply('java')
    plugins.apply('java-library')

    // 设置项目的 group 和 version
    group 'com.hongjun'
    version '1.0-SNAPSHOT'


    tasks.register('helloGradle') {
        description = 'hello gradle'
        group = 'custom tasks'
        doLast {
            println 'hello gradle'
            // 这里中文乱码
            println '你好 gradle'
        }
    }

    tasks {
        // 定义一个自定义的 clean 任务，用于删除 build 目录和日志文件夹
        clean {
            delete(rootProject.buildDir, subprojects.buildDir) // 删除根目录下的 build 目录和子模块的 build 目录
        }

        // 设置编译版本
        compileJava {
            options.encoding = "UTF-8"

            // sourceCompatibility = JavaVersion.VERSION_17
            // targetCompatibility = JavaVersion.VERSION_17
        }
        javadoc {
            options.encoding = "UTF-8"
        }
        compileTestJava {
            options.encoding = "UTF-8"
            // sourceCompatibility = JavaVersion.VERSION_17
            // targetCompatibility = JavaVersion.VERSION_17
        }
    }

    configurations {
        // 排除依赖项中整个 spring-boot 下面的 logging
        configureEach {
            exclude group: 'org.springframework.boot', module: 'spring-boot-starter-logging'
        }
        // 排除所有指定依赖项下的某个依赖
        // implementation (**) {
        //     exclude group: 'org.springframework.boot', module: 'spring-boot-starter-logging'
        // }
    }
}


// 子模块的通用设置
subprojects {
    // 设置通用的依赖
    dependencies {
        // lombok 使用需要加上这个注解，否则编译失败
        annotationProcessor 'org.projectlombok:lombok:1.18.22'
        implementation 'javax.inject:javax.inject:1'
        implementation 'jakarta.annotation:jakarta.annotation-api:2.1.1'
        implementation 'com.google.guava:guava:31.1-jre'
        implementation 'com.google.code.gson:gson:2.10'
        implementation 'com.alibaba.fastjson2:fastjson2:2.0.23'
        implementation 'cn.hutool:hutool-all:5.8.18'

        // 测试时的使用
        testAnnotationProcessor 'org.projectlombok:lombok:1.18.22'


        testImplementation(platform('org.junit:junit-bom:5.9.1'))
        // 支持旧版本的 IDEA 允许测试
        testRuntimeOnly("org.junit.platform:junit-platform-launcher") {
            because("Only needed to run tests in a version of IntelliJ IDEA that bundles older versions")
        }
        // 仅支持 JUnit5
        testImplementation("org.junit.jupiter:junit-jupiter-engine")
        // 支持 JUnit3 或 JUnit4 测试代码
        testRuntimeOnly("org.junit.vintage:junit-vintage-engine")
        testImplementation("org.junit.vintage:junit-vintage-engine")

    }
    test {
        // 使用 JUnit5 测试框架
        useJUnitPlatform()
        testLogging {
            events "passed", "skipped", "failed"
        }
        // systemProperty("java.util.logging.manager", "org.apache.logging.log4j.jul.LogManager")
    }
    configurations {
        // compileOnly 继承自 annotationProcessor 等价于 ->
        // compileOnly 'org.projectlombok:lombok:1.18.22'
        // +
        // annotationProcessor 'org.projectlombok:lombok:1.18.22'

        compileOnly {
            extendsFrom annotationProcessor
        }
        api {
            extendsFrom annotationProcessor
        }
        // 同上 testAnnotationProcessor + testImplementation
        testImplementation {
            extendsFrom testAnnotationProcessor
        }
    }
}

// 任务配置
tasks.register('delAllLogDirs', Delete) {

    description = '删除全部日志文件夹'
    group = 'custom tasks'
    // 定义根项目日志文件的路径
    String logsRootDir = rootProject.projectDir.absolutePath + "\\logs"
    doFirst {
        println '开始删除根项目[' + rootProject.name + ']的日志文件夹'
        delete logsRootDir

        // 在每个子项目的目录中执行删除
        rootProject.getSubprojects().forEach {sub ->
            String logsSubDir = sub.projectDir.absolutePath + "\\logs"
            println '开始删除子项目[' + sub.name + ']的日志文件夹'
            delete logsSubDir
        }
    }
    doLast {
        println '删除完成'
    }
}

tasks.register('delAllLogFiles', Delete) {
    description = '删除日志文件'
    group = 'custom tasks'

    doFirst {
        // 在每个子项目的目录中执行删除
        rootProject.getSubprojects().forEach {sub ->
            String logsSubDir = sub.projectDir.absolutePath + "\\logs"
            println '开始删除子项目[' + sub.name + ']的日志'
            // 更简洁的语法
            // sub.delete(fileTree(logsSubDir).include('**/*.log','**/*html'))
            sub.delete {
                fileTree(logsSubDir).include('**/*.log','**/*html').each {File file ->
                    println '删除文件: ' + file
                    file.delete()
                }
            }
        }
    }

    doLast {
        println '删除日志文件完成'
    }
}


project(':common-base') {
    tasks {
        plugins.apply('java-library')
    }
    sourceSets {
        // 定义源码所在位置
        main {
            java {
                srcDirs = ['src/main/java']
            }
            resources {
                srcDirs = ['src/main/resources']
            }
        }
    }
}


project(':common-web-spring-boot-starter') {
    sourceSets {
        // 定义源码所在位置
        main {
            java {
                srcDirs = ['src/main/java']
            }
            resources {
                srcDirs = ['src/main/resources']
            }
        }
    }

    dependencies {
        // 引用 common-base
        implementation project(':common-base')
    }
}

project(':elasticsearch-starter') {

    dependencies {
        // 自定义配置元数据
        annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor:3.0.0'
        implementation 'org.springframework.boot:spring-boot-autoconfigure:3.0.0'
        implementation 'org.springframework.boot:spring-boot-starter-log4j2:3.0.0'

        testImplementation 'org.springframework.boot:spring-boot-starter-test:3.0.0'

    }
}

project(':quick-starter') {
    dependencies {
        implementation project(':common-base')
        implementation project(':common-web-spring-boot-starter')
        implementation project(':elasticsearch-starter')
    }
}

project(':mongodb-quickstart') {
    dependencies {
        implementation project(':common-base')
    }
}

